
assert_spec linux

#exec rm -rf var/libcache/cbe
#exec rm -rf var/libcache/cbe_cxx
#exec rm -rf var/libcache/cbe_common
#exec rm -rf var/libcache/cbe_common_cxx
#exec rm -rf var/libcache/cbe_init
#exec rm -rf var/libcache/cbe_init_cxx
#exec rm -rf var/libcache/cbe_check
#exec rm -rf var/libcache/cbe_check_cxx
#exec rm -rf var/libcache/cbe_dump
#exec rm -rf var/libcache/cbe_dump_cxx
#exec rm -rf var/libcache/external_crypto
#exec rm -rf var/libcache/external_crypto_cxx
#exec rm -rf var/libcache/external_trust_anchor
#exec rm -rf var/libcache/external_trust_anchor_cxx

set dd [installed_command dd]

proc cbe_image_file { } {
	return "cbe_block.img"
}

set image_size 512
if {[info exists ::env(CBE_IMAGE_SIZE)]} {
	set image_size $::env(CBE_IMAGE_SIZE)
}

proc cbe_image_size_mb { } {
	global image_size
	return $image_size
}

proc cbe_vbd_size_mb { } {
	return [expr [cbe_image_size_mb] / 2]
}

proc cbe_ft_size_mb { } {
	return [expr [cbe_image_size_mb] / 8]
}

append build_components {
	core init timer
	app/cbe_tester
	server/log_terminal
	server/report_rom
	server/lx_block
}

build $build_components

create_boot_directory

append config {
<config verbose="yes">
	<parent-provides>
		<service name="ROM"/>
		<service name="RAM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
	</parent-provides>

	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>

	<default caps="100"/>
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>

	<start name="report_rom">
		<resource name="RAM" quantum="32M"/>
		<provides> <service name="Report"/> <service name="ROM"/> </provides>
		<config verbose="yes"/>
	</start>

	<start name="log_terminal">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Terminal"/></provides>
	</start>

	<start name="lx_block" ld="no">
		<resource name="RAM" quantum="2M"/>
		<provides> <service name="Block"/> </provides>
		<config file="} [cbe_image_file] {" block_size="4K" writeable="yes"/>
	</start>

	<start name="test" caps="200">
		<binary name="cbe_tester"/>
		<resource name="RAM" quantum="80M"/>
		<config
			verbose_cmd_pool_cmd_pending="no"
			verbose_cmd_pool_cmd_in_progress="yes"
			verbose_cmd_pool_cmd_completed="yes"
			verbose_blk_pkt_in_progress="no"
			verbose_blk_pkt_completed="no"
			verbose_ta_req_in_progress="no"
			verbose_ta_req_completed="no"
			verbose_crypto_req_completed="no"
			verbose_crypto_req_in_progress="no"
			verbose_client_data_mismatch="no"
			verbose_client_data_transferred="no">

			<initialize>

				<virtual-block-device
					nr_of_levels="3"
					nr_of_children="16"
					nr_of_leafs="256" />

				<free-tree
					nr_of_levels="3"
					nr_of_children="16"
					nr_of_leafs="256" />

			</initialize>

			<construct/>
			<request op="write" vba="20" count="10" sync="no" salt="4321"/>
			<request op="read" vba="20" count="10" sync="no" salt="4321"/>
			<request op="write" vba="50" count="2" sync="no"/>
			<request op="write" vba="20" count="10" sync="no"/>
			<request op="create_snapshot" sync="no"/>

			<check/>

			<benchmark op="start" label="First Benchmark"/>
			<request op="write" vba="50" count="100" sync="no"/>
			<request op="write" vba="30" count="100" sync="no"/>
			<request op="write" vba="10" count="100" sync="no"/>
			<request op="read" vba="50" count="100" sync="no"/>
			<request op="read" vba="30" count="100" sync="no"/>
			<request op="read" vba="10" count="100" sync="no"/>
			<request op="create_snapshot" sync="no"/>
			<request op="write" vba="50" count="100" sync="no"/>
			<request op="write" vba="30" count="100" sync="no"/>
			<request op="write" vba="10" count="100" sync="no"/>
			<benchmark op="stop"/>

			<request op="create_snapshot" sync="no"/>
			<request op="rekey" sync="no"/>
			<request op="read" vba="20" count="10" sync="no"/>
			<request op="sync" vba="0" count="100" sync="no"/>

			<dump
				max_superblocks="1"
				vbd="yes"
				vbd_vba_filter_enabled="yes"
				vbd_vba_filter="50"
				free_tree="no"
				meta_tree="no"
				hashes="yes"/>

			<request op="extend_ft" count="12" sync="no"/>
			<request op="sync" vba="20" count="10" sync="no"/>

			<benchmark op="start" label="Second Benchmark"/>
			<request op="write" vba="20" count="10" sync="yes" salt="1234"/>
			<list-snapshots/>
			<request op="write" vba="30" count="10" sync="no" salt="20"/>
			<benchmark op="stop"/>

			<benchmark op="start"/>
			<request op="extend_vbd" count="23" sync="no"/>
			<request op="read" vba="20" count="10" sync="no" salt="1234"/>
			<request op="read" vba="20" count="10" sync="no" salt="1234"/>
			<request op="deinitialize" sync="no"/>
			<destruct/>
			<benchmark op="stop"/>

		</config>

		<route>
			<service name="Block"> <child name="lx_block"/> </service>
			<service name="Terminal"> <child name="log_terminal"/> </service>
			<service name="Timer"> <child name="timer"/> </service>
			<any-service> <parent/> </any-service>
		</route>
	</start>

</config>}

install_config $config

exec rm -rf bin/[cbe_image_file]
catch { exec $dd if=/dev/urandom of=bin/[cbe_image_file] bs=1M count=[cbe_image_size_mb] }

append boot_modules {
	core init timer cbe_tester
	ld.lib.so spark.lib.so libsparkcrypto.lib.so
	cbe_cxx.lib.so cbe_check_cxx.lib.so cbe_dump_cxx.lib.so cbe_init_cxx.lib.so
	external_crypto_cxx.lib.so external_trust_anchor_cxx.lib.so
	log_terminal report_rom lx_block
}

append boot_modules [cbe_image_file]

build_boot_image $boot_modules

append qemu_args " -nographic -m 1280 "

run_genode_until "child \"test\" exited with exit value.*\n" 60
grep_output {\[init\] child "test" exited with exit value}
compare_output_to {[init] child "test" exited with exit value 0}
